{
    "$schema": "./tmLanguage.json",
    "name": "proc",
    "scopeName": "source.proc",
    "patterns": [
        { "include": "#keyword" },
        { "include": "#comment" },
        { "include": "#type" },



        { "include": "#constant" },
        { "include": "#entity" },
        { "include": "#invalid" },
        { "include": "#meta" },
        { "include": "#operator" },
        { "include": "#punctuation" },
        { "include": "#storage" },
        { "include": "#string" },
        { "include": "#support" },
        { "include": "#variable" }
    ],
    "repository": {
        "keyword": {
            "patterns": [
                {
                    "name": "storage.type.c",
                    "match": "\\b(public|private|protected|internal|using)\\b"
                },
                {
                    "name": "keyword.control.c",
                    "match": "\\b(break|case|continue|default|do|else|for|goto|if|return|switch|while)\\b"
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.c",
                    "begin": "/\\*",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.begin.c"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.end.c"
                        }
                    },
                    "patterns": [
                        {
                            "name": "variable.other.constant",
                            "match": "(^\\s*|\\s+)TODO\\s+.*$"
                        },
                        {
                            "name": "entity.name.tag.css",
                            "match": "(^\\s*|\\s+)CRUTCH\\s+.*$"
                        }
                    ]
                },
                {
                    "name": "comment.line.double-slash.cpp",
                    "begin": "//",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.cpp"
                        }
                    },
                    "end": "(\n)",
                    "patterns": [
                        {
                            "name": "variable.other.constant",
                            "match": "\\s+TODO\\s+.*$"
                        },
                        {
                            "name": "entity.name.tag.css",
                            "match": "\\s+CRUTCH\\s+.*$"
                        }
                    ]
                }
            ]
        },
        "type": {
            "patterns": [
                {
                    "begin": "(class|enum|interface)( |\\t)+",
                    "beginCaptures": {
                        "0": {
                            "name": "storage.type.c"
                        }
                    },
                    "end": "(\n)",
                    "patterns": [
                        {
                            "match": "(\\w+\\.)*(\\w+)( |\\t|,|:|$)",
                            "captures": {
                                "2": {
                                    "name": "entity.name.type"
                                }
                            }
                        }
                    ]
                },
                {
                    "match": "\\b(Stream|Reader|Writer|Seeker|Utf8|File)\\b",
                    "name": "support.type.sys-types.c"
                }
            ]
        },



        "line_continuation_character": {
            "patterns": [
                {
                    "match": "(\\\\)\\n",
                    "captures": {
                        "1": {
                            "name": "constant.character.escape.line-continuation.c"
                        }
                    }
                }
            ]
        },
        "string_escaped_char": {
            "patterns": [
                {
                    "match": "(?x)\\\\ (\n\\\\             |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}     |\n[4-7]\\d?        |\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
                    "name": "constant.character.escape.c"
                },
                {
                    "match": "\\\\.",
                    "name": "invalid.illegal.unknown-escape.c"
                }
            ]
        },
        "string_placeholder": {
            "patterns": [
                {
                    "match": "(?x) %\n(\\d+\\$)?                           # field (argument #)\n[#0\\- +']*                          # flags\n[,;:_]?                              # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?          # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?    # precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]           # conversion type",
                    "name": "constant.other.placeholder.c"
                },
                {
                    "match": "(%)(?!\"\\s*(PRI|SCN))",
                    "captures": {
                        "1": {
                            "name": "invalid.illegal.placeholder.c"
                        }
                    }
                }
            ]
        },
        "constant": {
            "patterns": [
                {
                    "match": "\\b(EOF|NULL|true|false|TRUE|FALSE)\\b",
                    "name": "constant.language.c"
                },
                {
                    "match": "\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F']*[0-9a-fA-F])?)|(0(b|B)[01]([01']*[01])?)|(([0-9]([0-9']*[0-9])?\\.?[0-9]*([0-9']*[0-9])?)|(\\.[0-9]([0-9']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9']*[0-9])?)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
                    "name": "constant.numeric.c"
                }
            ]
        },
        "entity": {
            "patterns": [
                {
                    "match": "(?!(for|if|switch|while))(?>[a-zA-Z_](\\w+)?)(?=\\()",
                    "name": "entity.name.function.c"
                }
            ]
        },
        "invalid": {
            "patterns": []
        },
        "meta": {
            "patterns": [
                {
                    "begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.directive.c"
                        },
                        "2": {
                            "name": "punctuation.definition.directive.c"
                        }
                    },
                    "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
                    "name": "meta.preprocessor.include.c",
                    "patterns": [
                        {
                            "include": "#line_continuation_character"
                        },
                        {
                            "begin": "\"",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.string.begin.c"
                                }
                            },
                            "end": "\"",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.string.end.c"
                                }
                            },
                            "name": "string.quoted.double.include.c"
                        },
                        {
                            "begin": "<",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.string.begin.c"
                                }
                            },
                            "end": ">",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.string.end.c"
                                }
                            },
                            "name": "string.quoted.other.lt-gt.include.c"
                        }
                    ]
                },
                {
                    "match": "(#define)\\s+(\\w+)",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag"
                        },
                        "2": {
                            "name": "keyword.control.directive.c"
                        }
                    }
                },
                {
                    "begin": "\\b(virtual|void|object|bool)\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "storage.type.c"
                        }
                    },
                    "end": "(\\=)|(;)|$",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.assignment.c"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.c"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        },
                        {
                            "match": "\\b(virtual|void|object|bool)\\b",
                            "name": "storage.type.c"
                        },
                        {
                            "match": "\\w+(?=,|;)",
                            "name": "variable.other.assignment.c"
                        }
                    ]
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "match": "(?<![\\w$])(sizeof)(?![\\w$])",
                    "name": "keyword.operator.sizeof.c"
                },
                {
                    "match": "--",
                    "name": "keyword.operator.decrement.c"
                },
                {
                    "match": "\\+\\+",
                    "name": "keyword.operator.increment.c"
                },
                {
                    "match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
                    "name": "keyword.operator.assignment.compound.c"
                },
                {
                    "match": "&=|\\^=|<<=|>>=|\\|=",
                    "name": "keyword.operator.assignment.compound.bitwise.c"
                },
                {
                    "match": "<<|>>",
                    "name": "keyword.operator.bitwise.shift.c"
                },
                {
                    "match": "!=|<=|>=|==|<|>",
                    "name": "keyword.operator.comparison.c"
                },
                {
                    "match": "&&|!|\\|\\|",
                    "name": "keyword.operator.logical.c"
                },
                {
                    "match": "\\||\\^|~",
                    "name": "keyword.operator.c"
                },
                {
                    "match": "=",
                    "name": "keyword.operator.assignment.c"
                },
                {
                    "match": "\\.(?!\\.)",
                    "name": "keyword.operator.member.c"
                },
                {
                    "match": "%|/|-|\\+",
                    "name": "keyword.operator.c"
                },
                {
                    "match": "\\B(\\*|&)\\B",
                    "name": "keyword.operator.c"
                },
                {
                    "begin": "\\?",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.ternary.c"
                        }
                    },
                    "end": ":",
                    "applyEndPatternLast": true,
                    "endCaptures": {
                        "0": {
                            "name": "keyword.operator.ternary.c"
                        }
                    }
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "match": ";",
                    "name": "punctuation.terminator.statement.c"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.delimiter.c"
                }
            ]
        },
        "storage": {
            "patterns": [
                {
                    "match": "\\b(const|extern|register|restrict|static|volatile|inline)\\b",
                    "name": "storage.modifier.c"
                },
                {
                    "match": "\\b(struct|typedef|union|type)\\b",
                    "name": "storage.modifier.c"
                },
                {
                    "match": "\\.\\.\\.",
                    "name": "storage.modifier.args.c"
                },
                {
                    "begin": "^\\s*(?:((#)\\s*undef))\\b",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.directive.undef.c"
                        },
                        "2": {
                            "name": "punctuation.definition.directive.c"
                        }
                    },
                    "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
                    "name": "meta.preprocessor.c",
                    "patterns": [
                        {
                            "match": "[a-zA-Z_$][\\w$]*",
                            "name": "entity.name.function.preprocessor.c"
                        },
                        {
                            "include": "#line_continuation_character"
                        }
                    ]
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "name": "string.quoted.double.c",
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.c"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.c"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#string_escaped_char"
                        },
                        {
                            "include": "#string_placeholder"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.c",
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.c"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.c"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#string_escaped_char"
                        }
                    ]
                }
            ]
        },
        "support": {
            "patterns": []
        },
        "variable": {
            "patterns": [
                {
                    "match": "(\\*|&)([a-zA-Z_](\\w+)?)",
                    "captures": {
                        "1": {
                            "name": "storage.pointer.c"
                        },
                        "2": {
                            "name": "variable.other.pointer.c"
                        }
                    }
                },
                {
                    "match": "(?>[a-zA-Z_](\\w+)?)\\s?(?=\\=)",
                    "name": "variable.other.assignment.c"
                },
                {
                    "match": "(?>[a-zA-Z_](\\w+)?)(?=\\[)",
                    "name": "variable.other.access.c"
                },
                {
                    "match": "\\b(?<=virtual|void|object|bool)\\*?\\s(?>[a-zA-Z_]*\\w+?)(?!\\()",
                    "captures": {
                        "0": {
                            "name": "variable.other.assignment.c"
                        }
                    }
                }
            ]
        }
    }
}

/* Parsing expression grammar (PEG) of Proc
Wirth Extended Backus-Naur Form of Proc
https://en.wikipedia.org/wiki/Parsing_expression_grammar
http://www.cs.man.ac.uk/~pjj/bnf/ebnf.html */

{
    parserClass="proc.parser.ProcParser"
    //parserUtilClass="proc.parser.ProcParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Proc"
    psiPackage="proc.psi"
    psiImplClassSuffix="Impl"
    psiImplPackage="proc.psi.impl"
    //psiImplUtilClass="proc.psi.impl.ProcPsiImplUtil"

    elementTypeHolderClass="proc.psi.SymbolType"
    elementTypeClass="proc.psi.ProcElementType"
    tokenTypeClass="proc.psi.ProcTokenType"
    //elementTypeFactory("typeDecl|classDecl|accessModifier")="proc.psi.ProcElementTypeFactory.factory"
}

// Goal of process is a top scope.
Proc ::= Goal
Goal ::= Scope

// Many programming languages make a distinction between statements and definitions/declarations but not this.
Scope ::= Statement*

Statement ::= AccessModifier |
              WHITE_SPACE |
              LINE_COMMENT |
              NEWLINE |
              STATEMENT_ERROR

AccessModifier ::= PRIVATE | PROTECTED | PUBLIC

//Keyword ::= INTERFACE

// Proc letters and digits.
//              Letter ::= LatinLetter | OtherLetter | OtherDigit
//               Digit ::= DecimalDigit | LatinLetter

// Base language characters.
//         LatinLetter ::= LATIN_LETTER // "A" | "B" | ... | "Z" | "a" | "b" | ... | "z".
//        DecimalDigit ::= DECIMAL_DIGIT // "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9".

// Any other characters to extend language.
//         OtherLetter ::= "∅"
//          OtherDigit ::= "∅"


/*
procFile ::= item_*

private item_ ::= (property|COMMENT|CRLF)

property ::= (KEY? SEPARATOR VALUE?) | KEY
*/

/* Parsing expression grammar (PEG) of Proc
https://en.wikipedia.org/wiki/Parsing_expression_grammar
Wirth Extended Backus-Naur Form of Proc is not useful in this case.
http://www.cs.man.ac.uk/~pjj/bnf/ebnf.html */

{
    parserClass="proc.parser.ProcParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Proc"
    psiPackage="proc.psi"
    psiImplClassSuffix="Impl"
    psiImplPackage="proc.psi.impl"

    elementTypeHolderClass="proc.psi.SymbolType"
    elementTypeClass="proc.psi.ProcElementType"
    tokenTypeClass="proc.psi.ProcTokenType"
}

// Goal of process is a top scope.
                  Proc ::= Goal
                  Goal ::= Scope

// Many programming languages make a distinction between statements and definitions/declarations but not this.
                 Scope ::= Statement*

// Proc syntax.
             Statement ::= WHITE_SPACE |
                           NEW_LINE |
                           LINE_COMMENT |
                           BLOCK_COMMENT |
                           //Declaration |

                           AccessModifier |
                           CLASS | ENUMERATION | INTERFACE | USE | USING | CONSTANT | STATIC |
                           RETURN | FOR | DO | WHILE | IF | ELSE |
                           NUMBER | IDENTIFIER | STRING |

                           VAR | VOID | OBJECT |

                           DELIMITER

                           // | STATEMENT_ERROR

         //Declaration ::= AccessModifier? ("static" | "const")? Type Identifier // ("=" Expression)?
           Declaration ::= AccessModifier? NUMBER IDENTIFIER "=" NUMBER
        AccessModifier ::= PRIVATE | PROTECTED | PUBLIC
                //Cast ::= "(" Type ")"
                //Type ::= Number ("[" Number "]")* | Identifier
          //Identifier ::= Letter (Letter | Digit)*

           /*Statement ::= Assignment+ |
                           IfStatement+ |
                           CaseStatement+ |
                           WhileStatement+ |
                           DoWhileStatement+ |
                           ForStatement+ |
                           Call+ |
                           Declaration+ */
        // Declaration ::= AccessModifier? ("static" | "const")? Type Identifier ("=" Expression)?
        // Declaration ::= { ConstantDeclaration } { FieldDeclaration } { FunctionDeclaration } { ClassDeclaration }
// ConstantDeclaration ::= [ AccessModifier ] "const" Type Identifier "=" ConstantExpression.
// VariableDeclaration ::= // Здесь надо подумать о области видимости переменных в функции.

// Language strings.
                //Char ::= "'" Character "'"
              //String ::= "\"" Character* "\""
           //Character ::= Letter | Digit
              //Number ::= Digit+

// Proc letters and digits.
              //Letter ::= LATIN_LETTER | OTHER_LETTER | OTHER_DIGIT
               //Digit ::= DECIMAL_DIGIT // | LATIN_LETTER

// Base language characters are part of the lexer.
// Any other characters to extend language are part of the lexer.

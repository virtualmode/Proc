#!/bin/sh

# Script help information.
print_help() {
cat << EOF
Proc0 configure script.
usage: ./configure [options]

Options:
  --help, -h               print this help message and exit

Advanced options:
  --debug                  compile with debug info
  --target=...             target OS (Darwin,WIN32,Android/Termux)
  --cpu=CPU                target CPU
EOF
exit 1
}

# Default values.
OPTIONS=

# Parse options.
for opt do
	eval opt=\"$opt\"
	case "$opt" in
		--help|-h) print_help="yes";;
		--debug) OPTIONS="$OPTIONS debug";;
		--target=*) TARGET=`echo $opt | cut -d '=' -f 2-`;;
		--cpu=*) CPU=`echo $opt | cut -d '=' -f 2-`;;
		*) echo "ERROR: unrecognized option '$opt'" && exit 1;;
	esac
done

# Print help.
if test "$print_help" = "yes" ; then
    print_help
fi

# Set variable unless already set.
default()
{
	local v
	eval v=\"\$$1\"
	test -z "$v" && eval $1=\"$2\"
}

# Print if not empty.
fcho() { if test -n "$2"; then echo "$1$2"; fi }

default TARGET WIN32
default HOST $TARGET

# Determine build operating system.
if test "$OS" = "Windows_NT" ; then
	BUILD="WIN32"
	if test "$PROCESSOR_ARCHITEW6432" = "AMD64" ; then
		default CPU amd64
	elif test "$PROCESSOR_ARCHITECTURE" = "AMD64" ; then
		default CPU amd64
	elif test "$PROCESSOR_ARCHITECTURE" = "x86" ; then
		default CPU x86
	fi
else
	UNAME=$(uname)
	UNAME_S=$(uname -s)
	UNAME_M=$(uname -m)
	default BUILD $UNAME
	default CPU $UNAME_M
	case $UNAME in
		Windows_NT|MINGW*|MSYS*|CYGWIN*)
			BUILD="WIN32";;
		Linux)
			if test "$(uname -o)" = "Android"; then
				BUILD=Android
				if test -n "$TERMUX_VERSION"; then
					BUILD=Termux
				fi
			fi
		;;
	esac
fi

# Determine extensions.
if test "$TARGET" = "WIN32" ; then
	LIB=".lib"
	EXE=".exe"
	DLL=".dll"
else
	LIB=".a"
	EXE=""
	DLL=".so"
fi

# Print output.
fcho "Options                    " "${OPTIONS# }"
echo "BUILD                      $BUILD" # Is the machine where we build programs --build=x86_64-linux-gnu.
echo "HOST                       $HOST" # Is the machine/system where the built programs will run --host=x86_64-linux-gnu.
echo "TARGET                     $TARGET" # It is the machine the compiler produces code for --target=arm-linux-gnueabihf.
echo "CPU                        $CPU"
echo "Generated config.mak"

# Generate Makefile configuration.
cat > config.mak << EOF
# DO NOT EDIT this file as it is auto-generated by configure script.
OPTIONS=$OPTIONS
BUILD=$BUILD
HOST=$HOST
TARGET=$TARGET
LIB=$LIB
EXE=$EXE
DLL=$DLL
EOF

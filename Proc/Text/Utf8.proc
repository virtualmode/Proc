use Interop

// Поток символов UTF-8.
class Utf8: Char, CharReader, CharWriter, CharSeeker



// TODO Нужно вести словарь терминов.
// Токен - последовательность символов в лексическом анализе в информатике, соответствующий лексеме.
// Токен - объект, создающийся из лексемы в процессе лексического анализа (токенизации, от англ. tokenizing).


// Тип литеры (лексемы), представляющий значение символа, а не его числовое представление в конкретной кодировке.
// Все значения строго отсортированы и сгруппированы в соответствии с интервалами кодировок без учёта самих кодов.
// Такая организация позволяет оптимизировать работу с некоторыми кодировками и сохранить при этом универсальность.
// TODO Здесь enum надо с типом сделать что-то типа как в Kotlin.
enum Text.Char.Type

	Null = 0,
	StartOfHeading,
	StartOfText,
	// ...


// Интерфейс символьного анализатора.
interface Text.Char.Reader

	// Чтение следующего символа.
	256[4] ReadChar()


// Интерфейс символьного генератора.
interface Text.Char.Writer

	// Запись очередного символа.
	0 WriteChar(256[4] character)


// Интерфейс поиска в символьном потоке.
interface Text.Char.Seeker

	2 SeekChar(256[8] offset)


// TODO Надо подумать какой интерфейс будет заниматься строками и номерами символов.
interface Text.Char.Stream

	//Номер текущего символа.
	256[8] Position
		get
		set

	// Номер текущего символа в строке.
	256[8] Character
		get
		set

	// Номер позиции символа в строке.
	// Табуляция занимает несколько позиций.
	256[8] Column
		get
		set

	// Номер текущей строки.
	256[8] Line
		get
		set


// Интерфейс работы с токеном символа определённой кодировки.
interface Text.Char

	// Лента со значением кода символа в реализуемой кодировке.
	256[4] Value
		get
		set

	// Тип токена.
	Type Type
		get

	// Является ли текущий символ строчной буквой.
	2 IsSmallLetter()

	// Является ли текущий символ заглавной буквой.
	2 IsCapitalLetter()

	// Является ли текущий символ буквой.
	2 IsLetter()

	// Является ли текущий символ индо-арабской десятичной цифрой.
	2 IsDecimalDigit()

	// Является ли текущий символ строчной латинской буквой.
	2 IsSmallLatinLetter()

	// Является ли текущий символ заглавной латинской буквой.
	2 IsCapitalLatinLetter()

	// Является ли текущий символ латинской буквой.
	2 IsLatinLetter()

	//region Draft

	/**
	 * Символ относится к группе допустимых разделителей, используемых в компиляторе.
	 */
	//@Deprecated("Достаточно специфическая реализация для использования в таком виде.")
	//fun IsDelimiter(): Boolean

	/**
	 * Символ является разделителем строк или входит в последовательность разделения.
	 */
	@Deprecated("Название не совсем соответствует действительности.")
	fun IsEndOfLine(): Boolean

	/**
	 * Символ является отступом.
	 */
	@Deprecated("Достаточно специфическая реализация для использования в таком виде.")
	fun IsWhitespace(): Boolean

	//endregion Draft

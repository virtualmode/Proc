// Интерфейс потока состояний.
interface Interop.Reader

	// Считывание единицы данных в новую выходную ленту.
	// @return Новая выходная лента.
	var Read()

	// Чтение единицы данных в имеющийся буфер.
	// @return Размер прочтённых данных. Зачем, если читаем единицу?
	var Read(var destination)

	// Чтение единицы данных в имеющийся поток.
	// @return Размер прочтённых данных. Зачем, если читаем единицу?
	var Read(Writer destination)

	#region Черновик

	// Размер можно сделать не в состояниях, а в элементах.
	// Ведь реализация интерфейса будет под конкретный тип.
	// Тогда не потребуется к логарифмам прикасаться.
	// А если стандартно считывать всегда один элемент,
	// то не потребуется даже размер указывать.
	// На самом деле всё так в реальности и происходит,
	// можно посмотреть исходник memcpy.
	// Процессор не может оперировать объемом больше машинного слова.
	// Хотя может какие-то архитектуры это позволяют.

	// Чтение потока состояний в имеющийся буфер.
	// @param destination Лента для записи читаемых данных.
	// @param size Размер считываемых данных.
	// @return Размер прочтённых данных.
	var Read(var destination, var size)

	// Чтение потока состояний в новый буфер.
	// @param size Размер считываемых данных.
	// @return Буфер с прочтёнными данными.
	var Read(var size)

	// Чтение потока состояний в другой поток.
	// @param destination Поток для записи читаемых данных.
	// @param size Размер считываемых данных.
	// @return Размер прочтённых данных.
	var Read(Writer destination, var size)

	#endregion

/*
	Proc(ess(or))
*/

use var = [] // Псевдоним для типа ленты неизвестной длины.

// Untyped data objects.
use bit = 2 // Binary type with two states.
use bit4 = nibble = 2[4] // 16-state type (4 bits).
use bit8 = byte = 2[8] // 256-state type (8 bits).
use bit16 = byte2 = 2[16]
use bit32 = byte4 = 2[32]
use bit64 = byte8 = 2[64]
use bit128 = byte16 = 2[128]
use bit256 = byte32 = 2[256]
use bit512 = byte64 = 2[512]


// Булев тип данных.
public final class Boolean

	public const Boolean false = Boolean(0)
	public const Boolean true = Boolean(1)

	private bit _value

	public Boolean()

	private Boolean(bit value)
		_value = value

	public operator ==(Boolean value)
		return _value == value._value

	public operator =()

use bool = Boolean // TODO Это уже класс! Может зеленый цвет для bool использовать?
use true = Boolean.true
use false = Boolean.false



// Целочисленный тип.
public class Integer

	private var _value

	public Integer()

	// Перегрузка оператора присваивания.
	// @value Присваиваемое значение.
	public void operator =(var value)
		//if (value.Base == 16) // Через стек прокидывать надо.

use int = Integer // В данном случае это не совсем классический int.



public class Float
use float = Float



public class Complex
use complex = Complex



public class String
	// TODO Для AccessModifier можно в принципе использовать оба варианта, как C++ и C#.
	private var _value
	public String()
	public void operator =(var value)

use string = String



// Базовые нетипизированные объекты могут использоваться как числа, т.к. и являются натуральными числами.
use false = 0
use true = 1
// Или использовать константы, но в языке их описать как ключевые слова:
public const bit false = 0 // CRUTCH Вариант определения булева значения.
public const bit true = 1

// Неймспейс
// Нетипизированный объект данных
// Алиас для любых типов и объектов данных
// Будет ли в базовых объектах целочисленная арифметика?
// Нужно ли к базовым объектам цеплять написанный Integer?
public class Type Integer Float []

byte[8] test1 = { 1, 2, 3 } // stack
byte[] test2 = byte[8] // heap
var test3 = { 1, 2, 3 } // heap byte4[3]

MyClass testClass() // stack
MyClass[] testClass2 = MyClass() // heap будет?

bit32[] value
value = anotherArray

// use определяет в компиляторе объект Type, содержащий информацию о типе.
// Т.е. сам тип это всё-таки объект. А размер его это уже скорее вычисляемый параметр.
// sizeof(Type) - целое число [] внутренней арифметики. Но пока непонятно какого размера. Может быть и переменной длины.
// Если учитывать строки выше, то булевы false и true должны быть не типами, а скорее константами.




if (GetBoolFunc()) // Здесь просто возвращён bool.
if (intA > intB) // Как превратить непонятно что в bool? Переопределить оператор у int и вернуть bool.
if (bool) // Как оператор if без булева оператора должен работать с типом bool, который еще не реализован?
// Фактически вот такое представление кода. Что это значит? Оператор должен быть и если он опущен, то всё равно какой-то подразумевается.
// Какой? "> 0" ? "== 1" ?
if (intA > intB, true)
	A
else
	B

use if (<value>) <caseA> else <caseB>
	switch (value)
		case true
			caseA
		default
			caseB

		DefaultMethod()

/*
	Использование оператора use (using, import, #include).
	1. Подключение пространства имён.
	2. Подключение отдельного типа данных (как в Java) или пространства через *.
	3. Определение псевдонима для типа данных (дополнительно можно реализовать модификаторы типа global или static как в C#).
	4. Определение области видимости для переменной (как в C# для IDisposable)?
	5. Определение псевдонима для данных?
*/

// Вариант реализации булевых констант.
const bool false = bool.BooleanFalse()
const bool true = bool.BooleanTrue()

void Write(string text)
	//#proc masm
	//mov ax, dx
	//#proc

// TODO При выполнении листинга предполагается неявно использовать что-то типа varargs для передачи параметров в top scope листинга.
// TODO Верхний процессор может выполнить листинг с переменным количеством аргументов, как это делается в обычной оболочке.
// TODO Например вызов функции 'proc("src.proc", arg1, arg2, arg3)' или более привычной формы 'proc src.proc arg1 arg1 arg3'.
public void Proc(string fileName, ...)
	//WriteLine("Proc started with: $_args.joinToString()")

// Когда код уже загружен в память, пространство имён уже содержит часть функций для выполнения.
// Возможно импортировать листинг и, если требуется, вызвать собственную точку входа с определёнными параметрами.
public void ProcCompile(string fileName)
	// Лексический анализ файла.
	//_source = FileStream(_args[1]) // Базовый поток состояний, используемый процессором и дочерними анализаторами.
	//_destination = new Interop.FileStream($"{Path.GetFileNameWithoutExtension(_args[1])}.exe", FileMode.Create, FileAccess.Write)
	//_charReader = new Utf8((Reader)_source) // Символьный поток определённой кодировки.
	// В Roslyn следующие строки создаются в SyntaxTree Oo.
	//_lexer = new ProcSymbol(_charReader) // Лексический анализатор исходного кода.
	//_syntaxReader = new ProcSyntax(_lexer) // Синтаксический анализатор.
	// TODO Генерацию можно выполнить несколькими путями:
	// TODO Получить готовое синтаксическое дерево и сгенерировать код.
	// TODO Или получить на вход синтаксический анализатор и в процессе генерации дерева, сформировать код.
	//_generator = new Generator(_destination, _syntaxReader)
	//_generator.CompileAndEmit()

// Обёртка для выполнения кода.
public void ProcRun(string fileName, string entryPoint)
	//use fileName
	//entryPoint()

// Эта функция должна выполняться операционной системой первой.
public void Proc()

	Write("Proc is started and you are at top of this process.\n")
	Write("Please write code!\n\n")


// TODO Не совсем понятно как и когда будет выполняться top scope.
// TODO Скорее, какой листинг будет первым выполнен, тот код и будет иметь фактический приоритет.
Proc() // Точка входа.

return // Необязательный оператор, если возвращаемая лента из top scope нулевой длины.

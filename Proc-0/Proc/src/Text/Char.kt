package Text

/**
 * Интерфейс работы с токеном символа определённой кодировки.
 * TODO Скорее придется отказаться от интерфейсов в пользу абстрактных классов по типу C++.
 * TODO Либо реализовать их проще.
 */
interface Char {

	/**
	 * Поток состояний со значением кода символа в реализуемой кодировке.
	 * Код символа фиксированного размера для внутреннего использования.
	 * TODO Интерфейсы C# не позволяют использовать поле вместо свойства.
	 */
	var Value: Int
		get
		set

	/**
	 * Тип токена.
	 */
	var Type: CharType
		get

	/**
	 * Является ли текущий символ строчной буквой.
	 */
	fun IsSmallLetter(): Boolean

	/**
	 * Является ли текущий символ заглавной буквой.
	 */
	fun IsCapitalLetter(): Boolean

	/**
	 * Является ли текущий символ буквой.
	 */
	fun IsLetter(): Boolean

	/**
	 * Является ли текущий символ индо-арабской десятичной цифрой.
	 */
	fun IsDecimalDigit(): Boolean

	/**
	 * Является ли текущий символ строчной латинской буквой.
	 */
	fun IsSmallLatinLetter(): Boolean

	/**
	 * Является ли текущий символ заглавной латинской буквой.
	 */
	fun IsCapitalLatinLetter(): Boolean

	/**
	 * Является ли текущий символ латинской буквой.
	 */
	fun IsLatinLetter(): Boolean

	//region Draft

	/**
	 * Символ относится к группе допустимых разделителей, используемых в компиляторе.
	 */
	//@Deprecated("Достаточно специфическая реализация для использования в таком виде.")
	//fun IsDelimiter(): Boolean

	/**
	 * Символ является разделителем строк или входит в последовательность разделения.
	 */
	@Deprecated("Название не совсем соответствует действительности.")
	fun IsEndOfLine(): Boolean

	/**
	 * Символ является отступом.
	 */
	@Deprecated("Достаточно специфическая реализация для использования в таком виде.")
	fun IsWhitespace(): Boolean

	//endregion Draft
}

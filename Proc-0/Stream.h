#pragma once

#ifndef STREAM_H
#define STREAM_H

/*
	Все данные представлены в виде ленты, каждая клетка которой может содержать несколько различных значений, как в машине
	Тьюринга. На разных архитектурах такие клетки могут быть основаны на разных физических принципах и могут кодировать
	различное количество состояний - оснований, а объём данных можно выразить через логарифм общего количества состояний
	по основанию архитектуры. К сожалению такое представление объёма возрастает экспоненциально, но полностью отвязывает
	код от оборудования.
	TODO Может есть смысл подумать о бесконечном рекурсивном представлении состояний.
	TODO А может stream - это поток не клеток, а состояний в чистом виде.
*/

/*
	IStream - общий поток с возможностью чтения/записи сырых данных.
		ITextStream - поток для работы именно с символами. Лексический анализатор по сути работает с текстом.
			Utf8Stream - основной текстовый поток, который может использоваться для чтения текста.
			AsciiStream и UtfNStream - опциональные, т.к. фактически смысла не имеют, скорее так, в виде расширения.

		ILexicalAnalyzer(Stream) - вообще любые данные, которые преобразуются из одного состояния в другое - похожи.
		Сами процессы похожи. Их можно назвать фильтрами, лексическими анализаторами или даже анализатор можно
		представить как аудио процессор или как обычный поток, который считывает другой поток (текстовый например)
		и меняет свое состояние, ищет лексемы.
*/

/*
	Базовый класс для работы с потоками в Proc.
*/
class Stream {

public:

	Stream(const char *fileName);

	// base - основание, количество состояний.
	// Пока что тип данных будет выглядеть как base[exponent][exponent][..].
	// destination должен содержать указатель на место, в которое будет записано states состояний.
	void Read(object destination, object base);

	void Write(object destination, object base);
};

#endif

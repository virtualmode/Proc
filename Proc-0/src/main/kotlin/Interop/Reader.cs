/*
	TODO Подумать о бесконечном рекурсивном представлении состояний.
	TODO Подумать о варианте того, что Stream - это поток не клеток, а состояний в чистом виде.
	TODO Есть рабочий вариант клеток с переменным количеством состояний.
	TODO Можно попробовать сделать платформозависимые ByteReader, ByteWriter или ByteSeeker и использовать временно,
	TODO как заглушка, которая может работать с блоками только по 256 состояний.

	IStream - общий поток с возможностью чтения/записи сырых данных.
		ITextStream - поток для работы именно с символами. Лексический анализатор по сути работает с текстом.
			Utf8Stream - основной текстовый поток, который может использоваться для чтения текста.
			AsciiStream и UtfNStream - опциональные, т.к. фактически смысла не имеют, скорее так, в виде расширения.

		ILexicalAnalyzer(Stream) - вообще любые данные, которые преобразуются из одного состояния в другое - похожи.
		Сами процессы похожи. Их можно назвать фильтрами, лексическими анализаторами или даже анализатор можно
		представить как аудио процессор или как обычный поток, который считывает другой поток (текстовый например)
		и меняет свое состояние, ищет лексемы.

		Можно придумать что-то типа локального namespace'а для наследуемых типов:
		Stream - интерфейс (без I, как в других языках).
		Stream.File - файловый поток (если использовать 'use', то без 'Stream.' можно определять File).
		А если есть некий абстрактный класс (интерфейс), то введя точку, можно посмотреть дочерние классы.
		Кажется достаточно удобным, учтывая что мы еще в IntelliSense увидим родительские и дочерние классы
		в алфавитном порядке и порядке зависимости плюс минус.
*/

/// <summary>
/// Интерфейс потока состояний.
/// Под потоком будет пониматься лента, которая также будет являться базовым типом данных.
/// Например char 1 байт - это поток из одного элемента из 256 состояний (но может быть представлен и в другом виде).
/// Содержимое, например IEEE 754 или целочисленное представление будет вынесено на другой уровень.
/// </summary>
interface Reader
{
	/// <summary>
	/// Считывание ЕДИНИЦЫ информации из текущего потока в другой поток?
	/// </summary>
	/// <param name="destination"></param>
	/// <returns></returns>
	object Read(Writer destination);

	object Read(object destination, object baseobj); // TODO Временная заглушка для старых языков.
}

#pragma once

#ifndef TOKEN_READER_H
#define TOKEN_READER_H

/*
	4. Первичная обработка исходного кода для компилятора или интерпретатора начинается с лексического анализа. Есть
	несколько способов реализации: обычная реализация, интерпретатор БНФ или регулярных выражений, компилятор
	анализаторов типа Lex. Для базовых языков подойдёт первый вариант, как самый простой и производительный.
	Если рассмотреть вообще любые данные, то при их первичной обработке происходит лексический анализ по сути, но место
	лексем могут занимать специфические конструкции: состояния, символы, цвета, заголовки, звуковые сэмплы и прочее.
	Чтение этих конструкций из потоков, запись и другие операции можно представить как часть одного и того же процесса.
	Такие классы задач можно выделить суффиксами в соответствии от их назначения, например Reader, Writer или Seeker.
*/

// Интерфейс лексического анализатора.
// В других источниках можно встретить варианты: lexical analyzer, lexer, tokenizer, scanner.
class TokenReader {
public:

	// Чтение очередной лексемы.
	// @return Количество успешно прочтённых лексем.
	virtual int ReadToken() = 0;
};

#endif // TOKEN_READER_H
